[{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"ecoCopula package allows visualise multivariate discrete data graphical models ordination. package designed primarily multivariate abundance data ecology, however can applied multivariate discrete data. two main functions : Copula ordination (cord) visualise samples (sites) variables (taxa) located along several latent variables (unobserved environmental gradient). Copula graphical models (cgr) plot graph distinguishes direct indirect associations variables (e.g taxa). ecoCopula package used model-based methods (rather distance-based, e.g. nMDS). cord cgr work either stackedsdm object (stacked species distribution model, ecoCopula) manyglm object (mvabund).","code":""},{"path":[]},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"copulas-for-discrete-data","dir":"Articles","previous_headings":"Under the hood","what":"Copulas for discrete data","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"Copulas way construct multivariate distribution, can used alternative hierarchical models (gllvm, HMSC, boral) generalised estimating equations (GEE; mvabund). Like hierarchical models, unlike GEEs, copulas directly model covariance variables (taxa). main advantage copulas relative hierarchical models speed, copula ordination usually least 10 times faster ordination hierarchical models, large sample sizes faster non-metric multidimensional scaling (nMDS). details copulas models fit ecoCopula see Popovic et. al. (2018,2019).","code":""},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"copula-ordination","dir":"Articles","previous_headings":"Under the hood","what":"Copula ordination","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"Model based ordination methods, including copula ordination using cord function well gllvm, boral HMSC, implemented latent variables. can interpreted unobserved environmental covariates. Biplots created plotting scores sites loadings taxa. directly modelling data, model-based methods account natural variation mean-variance relationships multivariate abundance data. can use standard statistical tools check assumptions perform model selection, quantify uncertainty estimated correlations taxa, predict existing /new sites, generally challenging using dissimilarity-based ordination methods (like nMDS).","code":""},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"copula-graphical-models","dir":"Articles","previous_headings":"Under the hood","what":"Copula graphical models","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"Graphical models look direct indirect associations variables (taxa). try answer question: abundance pair taxa related, accounting effect abundances taxa data? simple crude way might regressing two taxa separately (response) taxa data (predictors), looking residual correlation pair. Graphical models something like , using modern statistical techniques improve efficiency model community jointly. Install ecoCopula usual way. attach library.","code":"install.packages(\"ecoCopula\") library(ecoCopula) #> Loading required package: mvabund"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"hunting-spiders-counts-and-presenceabsence","dir":"Articles","previous_headings":"","what":"Hunting spiders (counts and presence/absence)","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"hunting spider dataset (van der Aart & Smeenk-Enserink, 1975) counts 12 hunting spiders 28 sites, collected using pit traps, well 6 environmental covariates. Species codes first four letters genus first four letters species. analyse counts presence-absence. Counts Presence-absence","code":"# spider data is stored in ecoCopula data(spider) X <- as.data.frame(spider$x) # environmental covariates abund <- spider$abund # abundance of spiders abund[1:5,1:6] #>      Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi #> [1,]       25       10        0        0        0        4 #> [2,]        0        2        0        0        0       30 #> [3,]       15       20        2        2        0        9 #> [4,]        2        6        0        1        0       24 #> [5,]        1       20        0        2        0        9 pa=(abund>0)*1 # presence-absence of spiders pa[1:4,1:6] #>      Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi #> [1,]        1        1        0        0        0        1 #> [2,]        0        1        0        0        0        1 #> [3,]        1        1        1        1        0        1 #> [4,]        1        1        0        1        0        1"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"ordination","dir":"Articles","previous_headings":"Hunting spiders (counts and presence/absence)","what":"Ordination","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"plot ordination biplot presence-absence data pa, first fit marginal model using stackedsdm manyglm family=\"binomial\", use copula ordination function cord resulting object, plot output.  colour sites predictor, can create colour variable.  check fit sensible model can plot residuals plot(spider_pa). fancier graphics ggplot see ?plot.cgr.","code":"# fit marginal model spider_pa <- stackedsdm(pa,~1, data = X, family=\"binomial\",ncores = 2) #eqiv. manyglm() # fit copula ordination  spid_lv=cord(spider_pa) # biplot plot(spid_lv,biplot = TRUE) sand<-ifelse(X$bare.sand==0,\"red\",\"blue\")  plot(spid_lv,site.col = sand)"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"graphical-model","dir":"Articles","previous_headings":"Hunting spiders (counts and presence/absence)","what":"Graphical model","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"plot graph spider counts abund, first fit marginal model using stackedsdm manyglm family=\"negative.binomial\" (counts).graphical models makes sense first control environmental variables, associations taxa control . use copula graph function cgr resulting object, plot output.  Graphs interpreted maps direct indirect associations taxa. taxa pairs direct edge (e.g Pardmont Trocterr) direct association, co-occurrence patterns due associations taxa data (mediator species, e.g. Alopcune). taxa direct edges positive associations (blue; e.g. Alopacce Alopfabr), negative associations (pink; none found) even controlling mediation effects taxa data. One interpretation taxa direct edges interacting, though can hypothesis, may unobserved taxa environmental variables causing apparent interaction. main objective analysis visualise relationships order generate hypotheses experimentally tested. check fit sensible model can plot residuals plot(spider_nb). fancier plots ggplot igraph see ?plot.cgr.","code":"# fit marginal model spider_nb <- stackedsdm(abund,~., data = X, family=\"negative.binomial\", ncores = 2) #eqiv. manyglm() # fit copula ordination  spid_gr=cgr(spider_nb, seed=3) # biplot plot(spid_gr, pad=1)"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"bryce-canyon-vegetation-ordinal-cover","dir":"Articles","previous_headings":"","what":"Bryce Canyon vegetation ordinal cover","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"data contain estimates cover class non-tree vascular plant species 160 375m^2 circular sample plots associated environmental variables Bryce Canyon National Park, Utah, U.S.. Species codes first three letters genus first three letters specific epithet. can download data labdsv package, two parts brycesite gives site data bryceveg cover data. model ordinal data stackedsdm need categories integers starting 1.","code":"library(labdsv) # site data data(brycesite) brycesite$plotcode=substr(brycesite$plotcode,3,5) #species data data(bryceveg) bryceveg<- bryceveg[,-which(colSums(bryceveg>0) <= 20)]  #most abundant species #recode data to integer categories old <- c(0,0.2,0.5,1,2,3,4,5,6) #existing categories bryceord=bryceveg for(i in 1:length(old)){   bryceord[bryceveg==old[i]]=i } #marginal model bryce_marg <- stackedsdm(bryceord, formula_X = ~ 1, data = brycesite, family=\"ordinal\",ncores = 2)"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"ordination-1","dir":"Articles","previous_headings":"Bryce Canyon vegetation ordinal cover","what":"Ordination","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"plot ordinations ggplot, colouring sites elevation gradient. traits color species traits.  Low elevation high elevation sites quite different species, low elevations associated e.g. cermon, high elevation e.g. pacmyr.","code":"bryce_ordi=cord(bryce_marg) library(RColorBrewer) library(ggplot2) # data frames for plotting site_res <- data.frame(bryce_ordi$scores,brycesite) sp_res <- data.frame(bryce_ordi$loadings,                      species = colnames(bryceord)) alpha= 2.5 # scaling parameter ggplot()+   geom_point(aes(x=Factor1,y=Factor2,color = elev ),site_res)+ #sites   geom_text(aes(x = Factor1*alpha, y = Factor2*alpha,label = species),data=sp_res)+ #species   scale_color_gradientn(colours = brewer.pal(n = 10, name = \"PuOr\"))+   theme_classic()"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"graphical-model-of-veg-species","dir":"Articles","previous_headings":"Bryce Canyon vegetation ordinal cover","what":"Graphical model of veg species","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"control slope. detailed plots cgr igraph output, can manipulate plot tidygraph ggraph packages well igraph package. strong positive association e.g. ceamar arcpat controlling species.","code":"cont_preds=sapply(brycesite, class)%in%c(\"int\",\"num\") brycesite[,cont_preds]=scale(brycesite[,cont_preds]) bryce_marg_all <- stackedsdm(bryceord, formula_X = ~ slope, data = brycesite,                              family=\"ordinal\",ncores = 2)  bryce_graph<-cgr(bryce_marg_all, seed = 1) #seed for demonstration igraph_out<-bryce_graph$best_graph$igraph_out  library(tidyr) library(tidygraph) library(ggraph)  igraph_out %>% ggraph('fr') + # see ?layout_tbl_graph_igraph     geom_edge_fan0(aes( colour = partcor, width=partcor)) +     scale_edge_width(range = c(0.5, 3))+     scale_edge_color_gradient2(low=\"#b2182b\",mid=\"white\",high=\"#2166ac\")+     geom_node_text(aes(label=name), repel = TRUE)+     geom_node_point(size=2)+     theme_void() +     theme(legend.position = 'none')"},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"other-ecocopula-functionality-and-notes","dir":"Articles","previous_headings":"","what":"Other ecoCopula functionality and notes","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"stackedsdm can take vector families, means column can different distribution. often useful modelling traits rather abundance (binary, continuous), also useful abundance data collected differently different taxa (presence/absence, counts, ordinal) Residual ordination: including predictors stackedsdm manyglm model, controlling . ordination control effect variables. might make easier see effect variables. uncommon cgr output graph edges. final model plot best model chosen BIC. small amount data often model associations. models indexed shrinkage parameter lambda, given graphical modelling exploratory, can explore different models changing lambda manually. can find shrinkage parameter best model cgr_fit$all_graphs$lambda.opt cgr_fit fitted cgr object. Smaller values lambda give dense graphs edges. can fit model smaller lambda lambda argument cgr. cord cgr n.samp argument. find different runs functions give different results, try increasing n.samp.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/articles/ecoCopula.html","id":"references","dir":"Articles","previous_headings":"Other ecoCopula functionality and notes","what":"References","title":"ecoCopula package for model based ordination and graphical modelling in ecology","text":"Aart, P. J. M. van der & N. Smeenk-Enserink 1975. Correlations distributions hunting spiders (Lycosidae, Ctenidae) environmental characteristics dune area. Neth. J. Zool, 25, 1-45. Popovic, G. C., Hui, F. K., & Warton, D. . (2018). general algorithm covariance modeling discrete data. Journal Multivariate Analysis, 165, 86-100. Popovic, G. C., Warton, D. ., Thomson, F. J., Hui, F. K., & Moles, . T. (2019). Untangling direct species associations indirect mediator species effects graphical models. Methods Ecology Evolution, 10(9), 1571-1583. Roberts D.W. (1992): Plant Community Distribution Dynamics Bryce Canyon National Park: Final Report Project PX 1200-7-0966","code":""},{"path":"https://eco-stats.github.io/ecoCopula/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gordana Popovic. Author, maintainer. David Warton. Contributor. Francis K.C. Hui. Contributor. Michelle Lim. Contributor.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Popovic, GC, Warton, DI, Thomson, FJ, Hui, FKC, Moles, . Untangling direct species associations indirect mediator species effects graphical models. Methods Ecol Evol. 2019; 10: 1571– 1583.","code":"@Article{,   title = {Untangling direct species associations from indirect mediator species effects with graphical models},   author = {Gordana C. Popovic and David I. Warton and Fiona J. Thomson and Angela T. Moles},   journal = {Methods in Ecology and Evolution},   year = {2019},   volume = {10},   number = {9},   pages = {1571 -- 1583},   doi = {10.1111/2041-210X.13247}, }"},{"path":"https://eco-stats.github.io/ecoCopula/index.html","id":"ecocopula","dir":"","previous_headings":"","what":"ecoCopula","title":"Graphical Modelling and Ordination using Copulas","text":"R package find direct indirect species associations co-occurrence data","code":""},{"path":"https://eco-stats.github.io/ecoCopula/index.html","id":"installation","dir":"","previous_headings":"ecoCopula","what":"Installation","title":"Graphical Modelling and Ordination using Copulas","text":"install ecoCopula CRAN: development version latest bells whistles: development version zero-inflated functionality: trouble installing, please email g.popovic@unsw.edu.au. Please note original repository R package found ","code":"install.packages(\"ecoCopula\") # install.packages(\"devtools\") devtools::install_github(\"eco-stats/ecoCopula\") # install.packages(\"devtools\") # devtools::install_github(\"r-forge/countreg/pkg\") devtools::install_github(\"eco-stats/ecoCopula\", ref=\"e401671\")"},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"cgr used fit Gaussian copula graphical model  multivariate discrete data, like species co-occurrence data ecology.  function fits model estimates shrinkage parameter using BIC. Use plot.cgr plot resulting graph.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"","code":"cgr(   obj,   lambda = NULL,   n.lambda = 100,   n.samp = 500,   method = \"BIC\",   seed = NULL )"},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"obj object either class manyglm,   manyany ordinal models clm lambda vector, values shrinkage parameter lambda model  selection (optional, see detail) n.lambda integer, number lambda values  model selection (default = 100), ignored lambda supplied n.samp integer (default = 500), number sets residuals used importance sampling  (optional, see detail) method method selecting shrinkage parameter lambda, either \"BIC\" (default) \"AIC\" seed integer (default = 1), seed random number generation (optional, see detail)","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"Three objects returned;  best_graph list parameters 'best' graphical model, chosen chosen method;  all_graphs list likelihood, BIC AIC models along lambda path;  obj input object.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"cgr used fit Gaussian copula graphical model multivariate discrete data, co-occurrence (multi species) data ecology. model estimated using importance sampling n.samp sets randomised quantile \"Dunn-Smyth\" residuals (Dunn & Smyth 1996), glasso package fitting Gaussian graphical models. Models fit path values shrinkage parameter lambda chosen completely dense sparse models fit. lambda value best_graph chosen BIC (default) AIC.  seed controlled models data different predictors can compared.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"Gordana Popovic <g.popovic@unsw.edu.au>.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"Dunn, P.K., & Smyth, G.K. (1996). Randomized quantile residuals. Journal Computational Graphical Statistics 5, 236-244. Popovic, G. C., Hui, F. K., & Warton, D. . (2018). general algorithm covariance modeling discrete data. Journal Multivariate Analysis, 165, 86-100.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See also","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"plot.cgr","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Gaussian copula graphical lasso to co-occurrence data — cgr","text":"","code":"abund <- spider$abund[,1:5] spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_graph=cgr(spider_mod) plot(spid_graph,pad=1)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":null,"dir":"Reference","previous_headings":"","what":"Model based ordination with Gaussian copulas — cord","title":"Model based ordination with Gaussian copulas — cord","text":"Model based ordination Gaussian copulas","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model based ordination with Gaussian copulas — cord","text":"","code":"cord(obj, nlv = 2, n.samp = 500, seed = NULL)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model based ordination with Gaussian copulas — cord","text":"obj object either class manyglm,   manyany ordinal models clm nlv number latent variables (default = 2, plotting scatterplot) n.samp integer (default = 500), number sets residuals used importance sampling  (optional, see detail) seed integer (default = NULL), seed random number generation (optional)","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model based ordination with Gaussian copulas — cord","text":"loadings latent factor loadings scores latent factor scores sigma covariance matrix estimated nlv latent variables theta precision matrix estimated nlv latent variables BIC BIC estimated model logL log-likelihood estimated model","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model based ordination with Gaussian copulas — cord","text":"cord used fit Gaussian copula factor analytic model multivariate discrete data, co-occurrence (multi species) data ecology. model estimated using importance sampling n.samp sets randomised quantile \"Dunn-Smyth\" residuals (Dunn & Smyth 1996), factanal function. seed controlled models data different predictors can compared.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"Model based ordination with Gaussian copulas — cord","text":"Gordana Popovic <g.popovic@unsw.edu.au>.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model based ordination with Gaussian copulas — cord","text":"Dunn, P.K., & Smyth, G.K. (1996). Randomized quantile residuals. Journal Computational Graphical Statistics 5, 236-244. Popovic, G. C., Hui, F. K., & Warton, D. . (2018). general algorithm covariance modeling discrete data. Journal Multivariate Analysis, 165, 86-100.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See also","title":"Model based ordination with Gaussian copulas — cord","text":"plot.cord","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/cord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model based ordination with Gaussian copulas — cord","text":"","code":"abund <- spider$abund spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_lv=cord(spider_mod) plot(spid_lv,biplot = TRUE)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted values from a stackedsdm object — fitted.stackedsdm","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"Fitted values stackedsdm object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"","code":"# S3 method for stackedsdm fitted(object, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"object object class stackedsdm ... used","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"matrix fitted values.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"Extracts fitted values stackedsdm object.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"Francis K.C. Hui <francis.hui@anu.edu.au>.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/fitted.stackedsdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted values from a stackedsdm object — fitted.stackedsdm","text":"","code":"library(mvabund) data(spider) X <- spider$x abund <- spider$abund  # Example 1: Simple example myfamily <- \"negative.binomial\" # Example 1: Funkier example where Species are assumed to have different distributions # Fit models including all covariates are linear terms, but exclude for bare sand fit0 <- stackedsdm(abund, formula_X = ~. -bare.sand, data = X, family = myfamily, ncores=2) fitted(fit0) #>             Alopacce    Alopcune    Alopfabr     Arctlute     Arctperi #> units1  18.239439075  5.72944913  1.84824965 1.733787e-01 2.614114e-01 #> units2   0.574937738 10.91758845  0.11883678 1.233708e+00 1.000000e-06 #> units3  12.796390651  8.37422532  1.22135400 4.663690e-01 4.803516e-02 #> units4   6.369090246  7.23571889  0.67265832 1.084879e+00 1.948166e-03 #> units5   1.847246864 10.66403979  0.41045498 1.489015e+00 1.764620e-05 #> units6   0.053339718  7.54439444  0.01714693 2.512629e+00 1.000000e-06 #> units7   1.790316488 12.78328159  0.25495713 6.165215e+00 1.728380e-05 #> units8   0.060496800  3.34807121  0.07847928 7.634772e-03 1.000000e-06 #> units9   4.804652178  2.38867237  0.78547053 3.629855e-01 3.940469e-02 #> units10  5.796189060  1.68662396  1.97337649 2.807266e-02 1.632348e-01 #> units11 10.674743518  2.50073273  1.61594333 1.023714e-01 2.057460e-01 #> units12 12.354251711  3.47387850  1.48946423 1.710713e-01 1.554745e-01 #> units13  1.719075301 50.81514469  0.13419156 7.425636e+00 1.733456e-04 #> units14  0.753297790  5.58325940  0.12583476 1.083397e+01 1.000000e-06 #> units15  0.023626731  7.29239238  0.02332829 1.276512e-01 1.000000e-06 #> units16  0.002244303  0.88788163  0.02450816 3.254817e-03 1.000000e-06 #> units17  0.031399335  9.82017726  0.02509812 1.558768e-01 1.000000e-06 #> units18  0.034405328  7.53034101  0.04516223 3.022311e-02 1.000000e-06 #> units19  0.005982467  1.21620548  0.02518152 9.466707e-03 1.000000e-06 #> units20  0.002112249  0.99585409  0.02105357 5.098833e-03 1.000000e-06 #> units21  0.005684769  1.61539778  0.02747983 7.436178e-03 1.000000e-06 #> units22  2.693446952  0.09773166 11.70871816 2.485391e-05 4.473446e+00 #> units23 24.195787923  0.50063982 15.31524154 1.779486e-04 8.855710e+00 #> units24 13.068803874  0.82511545  5.99586115 1.865888e-03 2.476450e+00 #> units25  3.834123624  1.20844732  3.32399352 2.604614e-03 3.131571e-04 #> units26  8.297089369  0.20577260 44.17303581 2.375144e-06 1.785605e+01 #> units27 22.962508395  0.33002954 20.61323125 5.384577e-05 2.287569e+00 #> units28 22.580750360  0.33332523 21.15718899 4.945857e-05 2.175068e+00 #>             Auloalbi    Pardlugu    Pardmont     Pardnigr     Pardpull #> units1  6.246029e+00  0.14673395 46.21546509 4.571731e+00 2.286804e+01 #> units2  4.839317e+01  2.88728364  9.62564065 3.397070e+01 7.796638e+01 #> units3  1.040089e+01  0.17670987 40.47461115 1.104517e+01 4.515780e+01 #> units4  1.299844e+01  0.32927856 41.79161499 2.031875e+01 7.041935e+01 #> units5  8.287397e+00  0.93614429  9.07087888 9.866695e+01 4.405246e+01 #> units6  2.879000e+00  3.32587128  7.04213262 9.804684e+00 1.237658e+01 #> units7  9.714575e+00  0.56385795 18.66309570 1.234824e+02 1.007958e+02 #> units8  4.502981e+00 26.25187948  0.78179195 1.340972e+00 7.890039e-01 #> units9  6.398908e-02  0.06793954 49.95754379 2.081384e+00 1.986247e+00 #> units10 1.972793e-02  0.09422697 15.72709170 9.316283e-01 2.757519e-01 #> units11 3.903659e-01  0.10576271 47.14012274 1.600086e+00 3.460346e+00 #> units12 1.339434e+00  0.12270998 53.86315317 2.670330e+00 9.188397e+00 #> units13 2.015290e+01  0.17807669 16.04219884 4.142190e+01 1.234677e+02 #> units14 1.464170e+01  1.81532567 30.15026027 1.389557e+02 1.634871e+02 #> units15 8.244225e-01  8.61005347  0.85836505 3.892906e+00 9.310314e-01 #> units16 6.175724e-05  8.36622883  0.07483028 3.066005e-01 3.975826e-04 #> units17 7.693405e-01  4.93906712  0.96911828 3.524352e+00 1.011545e+00 #> units18 6.270717e-01  8.65363817  0.45495797 2.639564e+00 3.944188e-01 #> units19 3.439665e-03 11.89787290  0.29309531 5.059937e-01 9.006105e-03 #> units20 6.073417e-05  7.29219102  0.08257814 3.682140e-01 4.854220e-04 #> units21 6.111447e-03 16.82592849  0.17765208 7.813532e-01 1.033129e-02 #> units22 1.294083e-06  0.06920151  1.46477591 9.372339e-03 2.979863e-05 #> units23 5.580253e-02  0.29363456  9.45280688 8.838901e-02 5.688250e-02 #> units24 2.219924e-02  0.13388839 13.45905784 2.083026e-01 9.380578e-02 #> units25 1.484514e+00  3.61200153  3.28647894 3.463452e+00 9.000806e-01 #> units26 6.238258e-05  0.27056389  0.42166194 1.940265e-02 9.175248e-05 #> units27 1.277356e-01  0.83371593  6.61331698 7.766916e-02 5.116620e-02 #> units28 1.240644e-01  0.86658930  6.06029510 7.947422e-02 4.773396e-02 #>            Trocterr    Zoraspin #> units1   18.3352321  1.74400341 #> units2   90.3951831 20.75715483 #> units3   32.3616070  3.56653846 #> units4   43.8164845  7.68985486 #> units5  138.7180969 28.55463853 #> units6   57.6057630 15.77690371 #> units7  148.8111236 36.27503647 #> units8   22.9857922  3.11312349 #> units9   11.2139988  1.43401223 #> units10   7.9268024  0.63335099 #> units11   9.3564798  0.97926407 #> units12  12.6292245  1.39331046 #> units13 130.8191121 11.06876236 #> units14 126.6461033 73.16976425 #> units15  51.0227314  7.19512558 #> units16  14.6242186  1.58643682 #> units17  50.8350811  5.63734903 #> units18  44.8805177  4.20044127 #> units19  15.4748074  2.36951595 #> units20  16.3574371  1.83033895 #> units21  21.9123589  3.03423657 #> units22   0.6045805  0.02023397 #> units23   1.7354742  0.08741095 #> units24   3.0348509  0.18053844 #> units25  16.5802466  2.36683229 #> units26   1.0923949  0.02147195 #> units27   1.5198742  0.09073516 #> units28   1.5598137  0.09142142  # Example 2: Funkier example where Species are assumed to have different distributions abund[,1:3] <- (abund[,1:3]>0)*1 # First three columns for presence absence myfamily <- c(rep(c(\"binomial\"), 3),               rep(c(\"negative.binomial\"), (ncol(abund)-3))) fit0 <- stackedsdm(abund, formula_X = ~ bare.sand, data = X, family = myfamily, ncores=2) fitted(fit0) #>          Alopacce   Alopcune  Alopfabr  Arctlute    Arctperi  Auloalbi #> units1  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units2  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units3  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units4  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units5  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units6  0.8635980 0.43106837 0.8265953 0.5916564  0.88208574 1.7510773 #> units7  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units8  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units9  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units10 0.9602934 0.13499534 0.9801575 0.3729749  9.05551052 0.7160559 #> units11 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units12 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units13 0.7885040 0.58584687 0.6542511 0.7099879  0.35145427 2.4932161 #> units14 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units15 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units16 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units17 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units18 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units19 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units20 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units21 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 #> units22 0.9306739 0.23802342 0.9464921 0.4567645  3.25610041 1.0605149 #> units23 0.9176213 0.28018845 0.9273941 0.4870765  2.35427463 1.2011487 #> units24 0.9306739 0.23802342 0.9464921 0.4567645  3.25610041 1.0605149 #> units25 0.9469193 0.18261553 0.9667202 0.4141730  5.33648900 0.8772650 #> units26 0.9756768 0.07914657 0.9916957 0.3133469 21.81483980 0.5108911 #> units27 0.8635980 0.43106837 0.8265953 0.5916564  0.88208574 1.7510773 #> units28 0.9399572 0.20673274 0.9585553 0.4332241  4.25285269 0.9571539 #>          Pardlugu  Pardmont  Pardnigr   Pardpull  Trocterr Zoraspin #> units1  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units2  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units3  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units4  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units5  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units6  0.7451292 10.255083  5.644297  4.5056558 13.969898 4.636483 #> units7  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units8  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units9  6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units10 0.1821669  6.638133  2.344651  1.1576482  6.063784 3.191637 #> units11 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units12 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units13 1.3000532 12.178051  7.986693  7.7083295 19.427203 5.373657 #> units14 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units15 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units16 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units17 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units18 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units19 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units20 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units21 6.7387742 20.240920 22.286760 37.7025694 51.499104 8.312125 #> units22 0.3381893  8.035432  3.448655  2.1027545  8.748512 3.760469 #> units23 0.4114807  8.537155  3.897437  2.5408149  9.826669 3.961187 #> units24 0.3381893  8.035432  3.448655  2.1027545  8.748512 3.760469 #> units25 0.2508310  7.327193  2.862279  1.5761156  7.328996 3.474068 #> units26 0.1070307  5.632903  1.682817  0.6930472  4.424932 2.771960 #> units27 0.7451292 10.255083  5.644297  4.5056558 13.969898 4.636483 #> units28 0.2877438  7.644479  3.118154  1.7993245  7.950058 3.602837"},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot graph of direct species associations. — plot.cgr","title":"Plot graph of direct species associations. — plot.cgr","text":"Plot graph direct species associations.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot graph of direct species associations. — plot.cgr","text":"","code":"# S3 method for cgr plot(   x,   P = NULL,   vary.edge.lwd = FALSE,   edge.col = c(\"light blue\", \"pink\"),   label = colnames(x$obj$fitted),   vertex.col = \"blue\",   label.cex = 0.8,   edge.lwd = ifelse(vary.edge.lwd, 10, 4),   edge.lty = c(1, 1),   ... )"},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot graph of direct species associations. — plot.cgr","text":"x cgr object, e.g. output cgr. P locations graph nodes, NULL (default) generated Fruchterman Reingold algorithm. vary.edge.lwd logical, TRUE vary line width according strength partial correlation, default (FALSE) uses fixed line width. edge.col takes two colours arguments - first colour used positive partial correlations, second colour negative partial correlations. label vector labels apply variable, defaulting column names supplied data. vertex.col colour graph nodes. label.cex size labels. edge.lwd line width, defaulting 10*partial correlation varying edge width, 4 otherwise. edge.lty vector two integers specifying line types positive negative partial correlations, respectively. default solid lines. ... parameters passed plotting gplot, particular pad, amount pad plotting range useful labels clipped. details see gplot help file.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cgr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot graph of direct species associations. — plot.cgr","text":"plot species associations accounting effect species, positive/negative blue/pink. matrix node positions (P) returned silently.","code":""},{"path":[]},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot graph of direct species associations. — plot.cgr","text":"","code":"abund <- spider$abund[,1:5] spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_graph=cgr(spider_mod) plot(spid_graph, edge.col=c(\"forestgreen\",\"darkorchid4\"),                   vertex.col = \"black\",vary.edge.lwd=TRUE)                    # \\donttest{ library(tidyr) library(tidygraph) #>  #> Attaching package: ‘tidygraph’ #> The following object is masked from ‘package:stats’: #>  #>     filter library(ggraph) #> Loading required package: ggplot2  igraph_out<-spid_graph$best_graph$igraph_out  igraph_out %>% ggraph('fr') + # see ?layout_tbl_graph_igraph    geom_edge_fan0(aes( colour = partcor, width=partcor)) +    scale_edge_width(range = c(0.5, 3))+    scale_edge_color_gradient2(low=\"#b2182b\",mid=\"white\",high=\"#2166ac\")+    geom_node_text(aes(label=name), repel = TRUE)+    geom_node_point(aes(size=1.3))+    theme_void() +    theme(legend.position = 'none')  # }"},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cord.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots an ordination of latent variables and their corresponding coefficients (biplot). — plot.cord","title":"Plots an ordination of latent variables and their corresponding coefficients (biplot). — plot.cord","text":"Plots ordination latent variables corresponding coefficients (biplot).","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots an ordination of latent variables and their corresponding coefficients (biplot). — plot.cord","text":"","code":"# S3 method for cord plot(   x,   biplot = FALSE,   site.col = \"black\",   sp.col = \"blue\",   alpha = 0.7,   arrow = TRUE,   site.text = FALSE,   labels = dimnames(x$obj$fitted),   ... )"},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots an ordination of latent variables and their corresponding coefficients (biplot). — plot.cord","text":"x cord object, e.g. output cord biplot TRUE latent variables coefficients plotted, FALSE latent variables site.col site number colour (default black), vector length equal number sites sp.col species name colour (default blue), vector length equal number sites (arrow=TRUE) alpha scaling factor ratio scores loadings (default 0.7) arrow arrows plotted species loadings (default TRUE) site.text sites labeled row names data (default FALSE, points drawn) labels labels sites species (biplots ) (default data labels) ... parameters passed plotting functions.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots an ordination of latent variables and their corresponding coefficients (biplot). — plot.cord","text":"ordination plot.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.cord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots an ordination of latent variables and their corresponding coefficients (biplot). — plot.cord","text":"","code":"X <- spider$x abund <- spider$abund spider_mod <- stackedsdm(abund,~1, data = X, ncores=2)  spid_lv=cord(spider_mod) #colour sites according to second column of x (bare sand) cols=ifelse(spider$x[,2]>0,\"black\",\"red\") plot(spid_lv,biplot = FALSE,site.col=cols, site.text = TRUE)   # \\donttest{ library(ggplot2) library(RColorBrewer) alpha= 2.5 site_res <- data.frame(spid_lv$scores,X) sp_res <- data.frame(spid_lv$loadings,species=colnames(abund)) ggplot()+  geom_point(aes(x=Factor1,y=Factor2,color = reflection ),site_res)+  geom_text(aes(x = Factor1*alpha, y = Factor2*alpha,label = species),data=sp_res)+  scale_color_gradientn(colours = brewer.pal(n = 10, name = \"PuOr\"))+  theme_classic()  # }"},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.stackedsdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot residuals of stackedsdm. — plot.stackedsdm","title":"Plot residuals of stackedsdm. — plot.stackedsdm","text":"Plot residuals stackedsdm.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.stackedsdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot residuals of stackedsdm. — plot.stackedsdm","text":"","code":"# S3 method for stackedsdm plot(x, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.stackedsdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot residuals of stackedsdm. — plot.stackedsdm","text":"x stackedsdm object. ... used","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/plot.stackedsdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot residuals of stackedsdm. — plot.stackedsdm","text":"","code":"abund <- spider$abund spider_mod <- stackedsdm(abund,~1, data = spider$x)  plot(spider_mod)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from a stackedsdm object — predict.stackedsdm","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"Predictions stackedsdm object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"","code":"# S3 method for stackedsdm predict(   object,   newdata = NULL,   type = \"link\",   se.fit = FALSE,   na.action = na.pass,   ... )"},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"object object class stackedsdm newdata Optionally, data frame look variables predict.  omitted, covariates existing dataset used. type type prediction required.  can supplied either single character string, applied species, vector character strings length ncol(object$y) specifying type predictions desired species. exact type prediction allowed depends precisely distribution, many least \"link\" scale linear predictors, \"response\" scale response variable. values argument can abbreviated. se.fit Logical switch indicating standard errors required. na.action Function determining done missing values newdata. default predict NA.. ... used","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"list k-th element result applying predict method k-th fitted model object$fits.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"function simply applies loop, cycling fitted model stackedsdm object attempting construct relevant predictions applying relevant predict method. Please keep mind formatting done predictions.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"Francis K.C. Hui <francis.hui@anu.edu.au>.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/predict.stackedsdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions from a stackedsdm object — predict.stackedsdm","text":"","code":"X <- spider$x abund <- spider$abund  # Example 1: Simple example myfamily <- \"negative.binomial\" # Fit models including all covariates are linear terms, but exclude for bare sand fit0 <- stackedsdm(abund, formula_X = ~. -bare.sand, data = X, family = myfamily, ncores=2)  predict(fit0, type = \"response\") #>        Alopacce    Alopcune    Alopfabr     Arctlute     Arctperi     Auloalbi #> 1  18.239439075  5.72944913  1.84824965 1.733787e-01 2.614114e-01 6.246029e+00 #> 2   0.574937738 10.91758845  0.11883678 1.233708e+00 2.431815e-07 4.839317e+01 #> 3  12.796390651  8.37422532  1.22135400 4.663690e-01 4.803516e-02 1.040089e+01 #> 4   6.369090246  7.23571889  0.67265832 1.084879e+00 1.948166e-03 1.299844e+01 #> 5   1.847246864 10.66403979  0.41045498 1.489015e+00 1.764620e-05 8.287397e+00 #> 6   0.053339718  7.54439444  0.01714693 2.512629e+00 9.279045e-10 2.879000e+00 #> 7   1.790316488 12.78328159  0.25495713 6.165215e+00 1.728380e-05 9.714575e+00 #> 8   0.060496800  3.34807121  0.07847928 7.634772e-03 1.068166e-09 4.502981e+00 #> 9   4.804652178  2.38867237  0.78547053 3.629855e-01 3.940469e-02 6.398908e-02 #> 10  5.796189060  1.68662396  1.97337649 2.807266e-02 1.632348e-01 1.972793e-02 #> 11 10.674743518  2.50073273  1.61594333 1.023714e-01 2.057460e-01 3.903659e-01 #> 12 12.354251711  3.47387850  1.48946423 1.710713e-01 1.554745e-01 1.339434e+00 #> 13  1.719075301 50.81514469  0.13419156 7.425636e+00 1.733456e-04 2.015290e+01 #> 14  0.753297790  5.58325940  0.12583476 1.083397e+01 1.930809e-07 1.464170e+01 #> 15  0.023626731  7.29239238  0.02332829 1.276512e-01 2.199721e-10 8.244225e-01 #> 16  0.002244303  0.88788163  0.02450816 3.254817e-03 1.600414e-11 6.175724e-05 #> 17  0.031399335  9.82017726  0.02509812 1.558768e-01 1.041906e-09 7.693405e-01 #> 18  0.034405328  7.53034101  0.04516223 3.022311e-02 1.238446e-09 6.270717e-01 #> 19  0.005982467  1.21620548  0.02518152 9.466707e-03 3.149255e-11 3.439665e-03 #> 20  0.002112249  0.99585409  0.02105357 5.098833e-03 1.380239e-11 6.073417e-05 #> 21  0.005684769  1.61539778  0.02747983 7.436178e-03 1.792364e-11 6.111447e-03 #> 22  2.693446952  0.09773166 11.70871816 2.485391e-05 4.473446e+00 1.294083e-06 #> 23 24.195787923  0.50063982 15.31524154 1.779486e-04 8.855710e+00 5.580253e-02 #> 24 13.068803874  0.82511545  5.99586115 1.865888e-03 2.476450e+00 2.219924e-02 #> 25  3.834123624  1.20844732  3.32399352 2.604614e-03 3.131571e-04 1.484514e+00 #> 26  8.297089369  0.20577260 44.17303581 2.375144e-06 1.785605e+01 6.238258e-05 #> 27 22.962508395  0.33002954 20.61323125 5.384577e-05 2.287569e+00 1.277356e-01 #> 28 22.580750360  0.33332523 21.15718899 4.945857e-05 2.175068e+00 1.240644e-01 #>       Pardlugu    Pardmont     Pardnigr     Pardpull    Trocterr    Zoraspin #> 1   0.14673395 46.21546509 4.571731e+00 2.286804e+01  18.3352321  1.74400341 #> 2   2.88728364  9.62564065 3.397070e+01 7.796638e+01  90.3951831 20.75715483 #> 3   0.17670987 40.47461115 1.104517e+01 4.515780e+01  32.3616070  3.56653846 #> 4   0.32927856 41.79161499 2.031875e+01 7.041935e+01  43.8164845  7.68985486 #> 5   0.93614429  9.07087888 9.866695e+01 4.405246e+01 138.7180969 28.55463853 #> 6   3.32587128  7.04213262 9.804684e+00 1.237658e+01  57.6057630 15.77690371 #> 7   0.56385795 18.66309570 1.234824e+02 1.007958e+02 148.8111236 36.27503647 #> 8  26.25187948  0.78179195 1.340972e+00 7.890039e-01  22.9857922  3.11312349 #> 9   0.06793954 49.95754379 2.081384e+00 1.986247e+00  11.2139988  1.43401223 #> 10  0.09422697 15.72709170 9.316283e-01 2.757519e-01   7.9268024  0.63335099 #> 11  0.10576271 47.14012274 1.600086e+00 3.460346e+00   9.3564798  0.97926407 #> 12  0.12270998 53.86315317 2.670330e+00 9.188397e+00  12.6292245  1.39331046 #> 13  0.17807669 16.04219884 4.142190e+01 1.234677e+02 130.8191121 11.06876236 #> 14  1.81532567 30.15026027 1.389557e+02 1.634871e+02 126.6461033 73.16976425 #> 15  8.61005347  0.85836505 3.892906e+00 9.310314e-01  51.0227314  7.19512558 #> 16  8.36622883  0.07483028 3.066005e-01 3.975826e-04  14.6242186  1.58643682 #> 17  4.93906712  0.96911828 3.524352e+00 1.011545e+00  50.8350811  5.63734903 #> 18  8.65363817  0.45495797 2.639564e+00 3.944188e-01  44.8805177  4.20044127 #> 19 11.89787290  0.29309531 5.059937e-01 9.006105e-03  15.4748074  2.36951595 #> 20  7.29219102  0.08257814 3.682140e-01 4.854220e-04  16.3574371  1.83033895 #> 21 16.82592849  0.17765208 7.813532e-01 1.033129e-02  21.9123589  3.03423657 #> 22  0.06920151  1.46477591 9.372339e-03 2.979863e-05   0.6045805  0.02023397 #> 23  0.29363456  9.45280688 8.838901e-02 5.688250e-02   1.7354742  0.08741095 #> 24  0.13388839 13.45905784 2.083026e-01 9.380578e-02   3.0348509  0.18053844 #> 25  3.61200153  3.28647894 3.463452e+00 9.000806e-01  16.5802466  2.36683229 #> 26  0.27056389  0.42166194 1.940265e-02 9.175248e-05   1.0923949  0.02147195 #> 27  0.83371593  6.61331698 7.766916e-02 5.116620e-02   1.5198742  0.09073516 #> 28  0.86658930  6.06029510 7.947422e-02 4.773396e-02   1.5598137  0.09142142  # \\donttest{ # Example 2: Funkier example where Species are assumed to have different distributions abund[,1:3] <- (abund[,1:3]>0)*1 # First three columns for presence absence myfamily <- c(rep(c(\"binomial\"), 3),        rep(c(\"negative.binomial\"), 5),        rep(c(\"tweedie\"), 4)        ) fit0 <- stackedsdm(abund, formula_X = ~ bare.sand, data = X, family = myfamily, ncores=2) predict(fit0, type = \"response\") #>     Alopacce   Alopcune  Alopfabr  Arctlute    Arctperi  Auloalbi  Pardlugu #> 1  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 2  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 3  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 4  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 5  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 6  0.8635980 0.43106837 0.8265953 0.5916564  0.88208574 1.7510773 0.7451292 #> 7  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 8  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 9  0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 10 0.9602934 0.13499534 0.9801575 0.3729749  9.05551052 0.7160559 0.1821669 #> 11 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 12 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 13 0.7885040 0.58584687 0.6542511 0.7099879  0.35145427 2.4932161 1.3000532 #> 14 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 15 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 16 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 17 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 18 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 19 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 20 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 21 0.4379158 0.89957172 0.1097251 1.2171196  0.02314281 7.0862156 6.7387742 #> 22 0.9306739 0.23802342 0.9464921 0.4567645  3.25610041 1.0605149 0.3381893 #> 23 0.9176213 0.28018845 0.9273941 0.4870765  2.35427463 1.2011487 0.4114807 #> 24 0.9306739 0.23802342 0.9464921 0.4567645  3.25610041 1.0605149 0.3381893 #> 25 0.9469193 0.18261553 0.9667202 0.4141730  5.33648900 0.8772650 0.2508310 #> 26 0.9756768 0.07914657 0.9916957 0.3133469 21.81483980 0.5108911 0.1070307 #> 27 0.8635980 0.43106837 0.8265953 0.5916564  0.88208574 1.7510773 0.7451292 #> 28 0.9399572 0.20673274 0.9585553 0.4332241  4.25285269 0.9571539 0.2877438 #>     Pardmont  Pardnigr  Pardpull  Trocterr Zoraspin #> 1  20.240920 20.390416 31.073385 48.705683 7.911132 #> 2  20.240920 20.390416 31.073385 48.705683 7.911132 #> 3  20.240920 20.390416 31.073385 48.705683 7.911132 #> 4  20.240920 20.390416 31.073385 48.705683 7.911132 #> 5  20.240920 20.390416 31.073385 48.705683 7.911132 #> 6  10.255083  6.458673  6.290503 15.154373 4.954795 #> 7  20.240920 20.390416 31.073385 48.705683 7.911132 #> 8  20.240920 20.390416 31.073385 48.705683 7.911132 #> 9  20.240920 20.390416 31.073385 48.705683 7.911132 #> 10  6.638133  3.095706  2.264300  7.181103 3.673106 #> 11 20.240920 20.390416 31.073385 48.705683 7.911132 #> 12 20.240920 20.390416 31.073385 48.705683 7.911132 #> 13 12.178051  8.636612  9.419498 20.356319 5.576868 #> 14 20.240920 20.390416 31.073385 48.705683 7.911132 #> 15 20.240920 20.390416 31.073385 48.705683 7.911132 #> 16 20.240920 20.390416 31.073385 48.705683 7.911132 #> 17 20.240920 20.390416 31.073385 48.705683 7.911132 #> 18 20.240920 20.390416 31.073385 48.705683 7.911132 #> 19 20.240920 20.390416 31.073385 48.705683 7.911132 #> 20 20.240920 20.390416 31.073385 48.705683 7.911132 #> 21 20.240920 20.390416 31.073385 48.705683 7.911132 #> 22  8.035432  4.275976  3.546768  9.968886 4.189161 #> 23  8.537155  4.737076  4.089088 11.061470 4.367459 #> 24  8.035432  4.275976  3.546768  9.968886 4.189161 #> 25  7.327193  3.658319  2.855590  8.508245 3.931430 #> 26  5.632903  2.345208  1.539581  5.416753 3.280628 #> 27 10.255083  6.458673  6.290503 15.154373 4.954795 #> 28  7.644479  3.930157  3.154610  9.150654 4.047810 # }"},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for cgr object — print.cgr","title":"Print function for cgr object — print.cgr","text":"Print function cgr object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for cgr object — print.cgr","text":"","code":"# S3 method for cgr print(x, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for cgr object — print.cgr","text":"x cgr object, e.g. output cgr. ... used","code":""},{"path":[]},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for cgr object — print.cgr","text":"","code":"abund <- spider$abund[,1:5] spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_graph=cgr(spider_mod) print(spid_graph) #>  #> Call: #> stackedsdm(y = abund, formula_X = ~1, data = spider$x, ncores = 2) #>  #> Pairwise associations: #> [1] \"10 positive and 4 negative\" #>"},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cord.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for cord object — print.cord","title":"Print function for cord object — print.cord","text":"Print function cord object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for cord object — print.cord","text":"","code":"# S3 method for cord print(x, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for cord object — print.cord","text":"x cord object, e.g. output cord. ... used","code":""},{"path":[]},{"path":"https://eco-stats.github.io/ecoCopula/reference/print.cord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for cord object — print.cord","text":"","code":"abund <- spider$abund spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_lv=cord(spider_mod) print(spid_lv) #>  #> Call: #> stackedsdm(y = abund, formula_X = ~1, data = spider$x, ncores = 2) #>  #> Pairwise associations: #> [1] \"2 latent variables\" #>"},{"path":"https://eco-stats.github.io/ecoCopula/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. mgcv ldTweedie","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"Calculate residuals stackedsdm object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"","code":"# S3 method for stackedsdm residuals(object, type = \"dunnsmyth\", seed = NULL, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"object object class stackedsdm; type Determined type residuals calculate. current options include Dunn-Smyth residuals (default; \"dunnsmyth\"), raw response residuals (\"response\") probability integral transform residuals (\"PIT\"); seed Dunn-Smyth PIT residuals applied discrete responses, random jittering added, seed can used seed jittering. ... used","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"matrix residuals","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"Calculated residuals stackedsdm object.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"Francis K.C. Hui <francis.hui@anu.edu.au>.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/residuals.stackedsdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate residuals from a stackedsdm object — residuals.stackedsdm","text":"","code":"X <- spider$x abund <- spider$abund  # Example 1: Simple example myfamily <- \"negative.binomial\" # Example 1: Funkier example where Species are assumed to have different distributions # Fit models including all covariates are linear terms, but exclude for bare sand fit0 <- stackedsdm(abund, formula_X = ~. -bare.sand, data = X, family = myfamily, ncores=2)  residuals(fit0) #>           Alopacce   Alopcune    Alopfabr    Arctlute     Arctperi    Auloalbi #> units1   0.8869130  0.9097481 -0.81190640 -2.45240675 -0.835215570 -0.52369416 #> units2  -0.3434584 -0.9285419 -1.26693704 -0.42205320  0.741866980 -0.80464653 #> units3   0.4313962  1.3074959  0.86678335  1.79784186 -0.030260400 -0.07527700 #> units4  -1.3737627  0.2032565 -0.94815803  0.58265579  0.136670486  1.53104295 #> units5  -0.2249609  1.0077469 -0.75287691  0.69160086 -1.325299285  0.32981717 #> units6   1.2342610  0.1397448 -0.51832000  1.19782843  0.210745882  1.35685155 #> units7   0.4541911 -0.1540515 -0.07875371  1.02757341  0.878821230  1.10964521 #> units8   1.1194705  1.7054761 -1.07451275 -0.51540063 -1.123259882  1.04308675 #> units9  -1.4974539 -0.3217752 -1.08696726 -1.40761266 -0.095125030 -1.01135075 #> units10 -0.9124340 -0.9291554 -0.13651135 -0.91132321  0.452484170 -2.32148272 #> units11  0.8141393 -0.3619516  0.55302503  0.01265863 -0.546221068  0.71011149 #> units12  0.7485332  1.7797721 -1.49261880 -0.35877439  0.053307725 -1.18958079 #> units13  0.7846018  0.1793624  1.18981912 -0.65183651 -0.834690121 -0.03163515 #> units14 -0.5820088 -0.3127485 -0.07760650 -1.37415144 -2.203783467 -1.72132593 #> units15  0.2353525 -1.3801016 -0.07344529  0.64601729 -1.777065865 -0.77896618 #> units16  0.7457426  1.2860228 -1.42969103  0.03938784 -2.146817581 -1.01807766 #> units17 -2.3138827 -1.3192417  0.13066577 -1.35996525 -0.341142443 -2.78163936 #> units18  1.7110392 -1.1234257  1.66199877  0.57863999  2.377504214 -0.38660130 #> units19 -0.6435101  0.1551491 -0.59305613  0.03664649  0.281658741  1.39314165 #> units20 -0.8077387  1.0961270  0.26967302  0.43097525  0.744021557  1.43312121 #> units21  0.1799414  0.0880132 -2.48250717 -0.73268108 -0.356184550 -0.27696720 #> units22  2.0169289 -0.8664772  0.66036782  1.25171761  0.029916194  0.54477225 #> units23 -0.6512914  0.3671523  0.25917139 -1.10523471 -0.442893838  0.02689504 #> units24 -0.2527131 -1.4458136  1.91403315 -1.10024146  1.346873448 -0.09592040 #> units25  1.7866250  0.4226503  1.51610162 -1.26487559  0.729725975  0.38967748 #> units26 -1.2796156 -2.2173195 -1.36672857 -0.53997974 -0.005356787  0.12131200 #> units27  0.7067297  0.2317339 -0.31029183 -0.56705692  1.122302264 -1.05889610 #> units28 -0.7188934  0.3740507 -0.12715910 -0.51187489 -0.699737127 -1.09361580 #>            Pardlugu    Pardmont     Pardnigr    Pardpull    Trocterr   Zoraspin #> units1  -0.03658536  0.61257576  1.466450081  1.56716658  2.43332162  1.1752814 #> units2  -0.96016358 -1.60663332 -0.437807151 -1.06106616 -0.33479244 -0.5697288 #> units3   1.09821768 -0.13165379  0.832924005  0.15068667  1.52117279 -0.5382376 #> units4   0.74555610 -1.49509043  0.708895213  0.73736814  1.44838844  1.9508947 #> units5   0.68174644 -1.12964618  0.660100230  1.29224723 -0.47125970 -0.3061021 #> units6  -1.77293861  0.79679802  1.537359299  1.47370512  0.35348658  1.3255543 #> units7   0.34490744  0.89550013 -0.001874459  0.24860959 -0.18120421 -0.5852381 #> units8   1.73333383  0.89465532  0.756313011  0.04429322  0.66440951  0.2299663 #> units9  -2.51972622 -0.48558475  0.052232665 -0.13262248 -1.59998751 -1.3148528 #> units10 -0.08524834  0.69380499 -0.247828594  0.24560589 -1.71246678 -1.5524661 #> units11 -0.38495318  1.26790406 -0.470603829 -0.71382043 -0.74749084 -0.3758293 #> units12  0.49713902  1.07448909 -0.358277984 -0.09382804  0.24689604 -0.3493802 #> units13  1.46214405  0.79896110  0.590744385 -0.76421536 -0.27900583  1.1921296 #> units14  0.77110688 -0.62209717 -1.379489837 -1.21519550 -0.28563580 -0.6194211 #> units15 -0.49186296 -1.79652094 -1.631311475 -0.52361755 -0.86271987 -0.6177669 #> units16 -0.25759508  0.01903475  2.117588839  1.13942959  1.35330678  1.4412978 #> units17 -1.08513324 -1.31010470 -1.021248832 -0.90614352 -0.96798062 -0.5538538 #> units18 -0.68962440  0.40561843 -1.862376158  0.26443400 -0.65198383 -1.4515741 #> units19  0.15145770  0.59199972  0.613649406 -1.34802685  0.77706557  0.6294775 #> units20  1.15852574 -0.39965326 -0.114574480  0.09305082  0.67404046  0.3649610 #> units21  0.11557620  1.21494144  0.097609395  2.54792863 -0.11211713 -0.1483822 #> units22 -0.96438037  0.37612208 -0.708069044 -0.27089710  1.08916286 -1.2388342 #> units23  2.32179501 -0.20369615  1.050249268 -0.82774796 -0.04437463  0.3455151 #> units24 -1.02177187 -1.23419878  0.331172979 -0.54901038 -1.84374756 -0.4161752 #> units25 -1.18018352  1.90532972  0.953462683 -1.62676695  0.10960545  1.4336785 #> units26 -0.15357508 -1.33155093  1.888072967  0.37074764 -0.12415368  0.4824713 #> units27 -1.47071921 -1.08525508 -0.765487226 -0.11159739 -2.16366490 -0.6351997 #> units28 -1.48763895  0.24783708  0.943306420  1.40154223  0.30990543 -0.2085068  # Example 2: Funkier example where Species are assumed to have different distributions abund[,1:3] <- (abund[,1:3]>0)*1 # First three columns for presence absence myfamily <- c(rep(c(\"binomial\"), 3),               rep(c(\"negative.binomial\"), (ncol(abund)-3))) fit0 <- stackedsdm(abund, formula_X = ~ bare.sand, data = X, family = myfamily, ncores=2) residuals(fit0) #>            Alopacce    Alopcune     Alopfabr      Arctlute   Arctperi #> units1   0.33315166 -0.45704288 -1.889192180 -1.600195e+00  0.7689570 #> units2  -0.03238627 -0.73521463  0.499899271 -4.532242e-01 -0.5579963 #> units3   1.95983764 -0.37241773  1.543043324  1.003620e+00  0.7771763 #> units4   1.94638160 -0.04463378 -0.834266810  8.764060e-01  0.6568944 #> units5   1.30079752  2.11396086 -0.574175312  9.273521e-01 -1.3985308 #> units6  -1.22305811  1.69484926 -2.535723657  1.996624e+00  0.1106641 #> units7   0.78865978 -0.72376643 -0.036310641  2.029272e+00  0.7765786 #> units8  -0.51004066 -0.17320466  0.489190424  5.371593e-01  1.4750978 #> units9   1.18696886 -0.01258353 -0.647164359 -1.631216e+00  0.2916488 #> units10  0.46435962  0.09670373  0.864056016 -7.016631e-01 -1.0708067 #> units11  0.18909723  1.21529769  2.433430470 -1.346101e+00 -0.8260949 #> units12  0.56444408 -1.09589536 -1.459589659 -1.056693e+00 -0.5004468 #> units13  1.23242167  0.06079179  1.982137455  1.153123e+00 -0.7469696 #> units14 -0.29648187 -0.40458829 -0.703529372  7.770033e-01  0.1889098 #> units15  0.12083750 -2.24705994 -0.016884204 -4.006578e-01 -0.5646070 #> units16 -0.46343847 -0.23871488 -1.510713784 -7.482922e-01 -0.9340590 #> units17 -0.73792026 -1.48068108 -0.287714178  4.505429e-05 -0.8477073 #> units18 -1.63086716 -0.66597608  0.577354893 -5.758727e-01 -0.7377657 #> units19 -0.62883677 -0.38725909 -1.244216517  7.281634e-02  1.3022767 #> units20  0.03832647  1.38451676  0.079720827 -2.557669e-01 -1.8966587 #> units21 -0.42258167  1.65747371  0.464667179  7.339848e-02  0.6045169 #> units22 -0.14723836 -0.19833534 -1.329784104  5.010819e-01  0.5140904 #> units23  0.55666097  0.41207716  0.785301172 -4.906617e-01  1.2728020 #> units24  0.49650431 -1.05018555  0.051647675  6.751196e-01  0.7924462 #> units25  0.84897452  1.00801365 -1.015652293 -4.270188e-01 -0.8805808 #> units26 -0.66168757  0.93049851 -0.007206241  1.083674e-01  0.3401880 #> units27 -0.25239891 -0.39828360 -0.502267110 -1.846864e+00  1.6173977 #> units28 -0.69584637 -0.60500416  0.193376103  7.748523e-02 -0.3254672 #>           Auloalbi    Pardlugu     Pardmont     Pardnigr    Pardpull #> units1   0.4694496 -0.61287678  1.303526038  0.507360931  0.83777683 #> units2   1.5099443 -0.28943512 -0.709355200  0.585577005  0.76664032 #> units3   0.8223772 -0.26154660  0.758253810  0.653858466  0.84439053 #> units4   1.3570441 -0.54418692  0.034369545  0.842501844  1.17760074 #> units5   0.8196218 -0.31876740 -0.390795253  1.754190786  1.07660596 #> units6   1.3587255 -0.06902292  0.581050758  1.572623206  1.62025380 #> units7   1.0838564 -0.39003101  0.787625040  1.451758351  1.23666667 #> units8   0.6874896  2.52840173 -0.472015559  0.029059229 -0.12395577 #> units9  -0.8423904 -2.31661204  0.693243957 -0.130964231 -0.15592110 #> units10 -0.5560140 -0.46865679  1.409504766 -0.249727403  0.47138874 #> units11  0.1566779 -2.54800246  1.736610217 -0.370801197 -0.15895067 #> units12 -0.7810788 -0.93943008  1.747861917 -0.101151614  0.28368781 #> units13  1.9237552  0.11851652  0.992086142  1.818349640  2.07252015 #> units14  0.4723337 -0.02878498  0.362204707  0.589507568  1.04851471 #> units15 -0.2385922  0.39816470 -1.416580881 -1.199517866 -0.74537763 #> units16 -0.5265815  0.42644771 -1.836024171 -0.005167325 -0.32998110 #> units17 -1.4930840 -0.10957762 -1.095801514 -0.900085293 -0.27675640 #> units18 -0.6514745  0.25993646 -1.377161945 -0.389507627 -0.63671475 #> units19 -0.4844318  0.88026005 -1.503426299 -0.192296097 -0.71460896 #> units20 -0.6022671  0.98023302 -2.121659124 -0.375909144 -1.48275711 #> units21 -0.5647897  1.11425704 -0.586480208 -1.632015732 -0.14160417 #> units22 -0.6157938 -1.26219655 -0.009180321 -1.767364310 -0.61955667 #> units23 -1.6800203  1.57695614  0.370402688 -0.820979296 -2.06263691 #> units24  0.0506789 -1.34992127  0.085726429 -1.537396026 -1.26508071 #> units25  1.1959373  1.25405537  0.775186737  1.059809949 -0.71242521 #> units26  0.1686554  0.89224565 -0.943511216 -0.427406673 -0.07668162 #> units27 -0.3783570 -0.75775110 -0.545935202 -1.533029152 -0.73864864 #> units28 -1.6279852  0.69039161  0.377691639 -0.009423297 -0.31409250 #>            Trocterr    Zoraspin #> units1   0.46963399  0.23019514 #> units2   0.58415245  0.60518294 #> units3   0.61101269 -0.22953141 #> units4   0.86254723  1.30829205 #> units5   0.91145758  0.99648545 #> units6   2.05141550  2.12169933 #> units7   1.19415154  0.95643791 #> units8  -0.03840288  0.11651861 #> units9  -1.41260325 -1.04966908 #> units10 -0.65729430 -1.91229775 #> units11 -1.08212043 -1.07515715 #> units12 -0.54204839 -1.52124732 #> units13  2.20627171  1.55703396 #> units14  0.95345027  1.50581646 #> units15 -0.14805972  0.12588715 #> units16 -0.08738422  0.22401234 #> units17 -0.22025833  0.01284372 #> units18 -0.14588418 -0.89177686 #> units19 -0.23897373  0.14103193 #> units20 -0.25080092 -0.10288163 #> units21 -0.36737073  0.01245841 #> units22 -0.87413764 -0.18068313 #> units23 -0.96508823 -3.31135756 #> units24 -1.05520423 -1.98770070 #> units25  1.08240349  0.92177439 #> units26 -0.66934895 -1.31676518 #> units27 -2.11056028 -1.41322772 #> units28 -0.50115196 -0.98119923"},{"path":"https://eco-stats.github.io/ecoCopula/reference/save_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for saving png of biplot — save_png","title":"Function for saving png of biplot — save_png","text":"Function saving png biplot","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/save_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for saving png of biplot — save_png","text":"","code":"save_png(code, width = 400, height = 400)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/simulate.cord.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates new data from a given cord object — simulate.cord","title":"Simulates new data from a given cord object — simulate.cord","text":"Simulates new data given cord object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/simulate.cord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates new data from a given cord object — simulate.cord","text":"","code":"# S3 method for cord simulate(object, nsim = 1, seed = NULL, newdata = object$obj$data, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/simulate.cord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates new data from a given cord object — simulate.cord","text":"object cord object, e.g. output cord nsim Number simulations, defaults 1. nsim > 1, simulated data appended. seed Random number seed, defaults random seed number. newdata data frame look X covariates simulate. ... used Defaults X covariates fitted model.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/simulate.cord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates new data from a given cord object — simulate.cord","text":"","code":"abund = spider$abund  spider_mod_ssdm = stackedsdm(abund,~1, data = spider$x, ncores=2) spid_lv_ssdm = cord(spider_mod_ssdm) simulate(spid_lv_ssdm, nsim=2) #>       Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi Pardlugu Pardmont #>  [1,]        5        0       16        0       33        0        0        7 #>  [2,]       48        0       10        0        8        0        0       31 #>  [3,]        1        2        0        0        0        0        1        0 #>  [4,]        0        0        0        2        0        0        4        2 #>  [5,]        0        0        0        0        0        0       19        0 #>  [6,]        0        8        1        0        0        2        1        0 #>  [7,]       33        0        9        0       23        0        0       10 #>  [8,]        0       12        0        0        0        0        7        1 #>  [9,]       30        5       22        0        0        3        1       20 #> [10,]        4        0        1        0        0        0        0        9 #> [11,]        0        0        0        0        0        0        0        0 #> [12,]       17        4        0        0       30        0        1       10 #> [13,]        0       38        0       13        0       11       21        3 #> [14,]        1        6        0        0        8        1        0       33 #> [15,]        0        3        0        0        0        0       26        0 #> [16,]        7        1        0        0        0        0        1        3 #> [17,]        7        1        2        0       22        0        2        1 #> [18,]        0        2        1        0        0        0        7        1 #> [19,]        7        3        1        0        0        4        0      104 #> [20,]        1        3        0        0        1        3        0        9 #> [21,]        8        2        0        1        0        1        4        6 #> [22,]        0       20        0        0        0        2        2        0 #> [23,]        2        0       13        0        0        0        1        6 #> [24,]        0        8        0        5        0        8        0       13 #> [25,]        3        0        1        0        0        0        0        0 #> [26,]        1        3        0        0        6        0        0       19 #> [27,]        0        1        0        0        0        0        5        1 #> [28,]       19        0        2        0        0        0        2       10 #> [29,]        1        0        0        1        1        0        1        1 #> [30,]        3       14        0        2        0        5        7        1 #> [31,]        4        0       32        0        0        0        0       12 #> [32,]        1       28        0        0        0        1        3        2 #> [33,]        4        1       37        1        0        0       11        0 #> [34,]       19        1        0        0        2        3        0       23 #> [35,]        1        0       15        0        5        0        0        0 #> [36,]        3        7        0        0        0        7        0       11 #> [37,]        1        0        8        0        1        0        1        5 #> [38,]        6        0       19        0        1        0        0        1 #> [39,]        6        2        5        0       20        0        1        2 #> [40,]        0        3        0        0        0       34        0       12 #> [41,]       21       12        0       13        0        1        0       46 #> [42,]       58        1       22        0        6        0        0       12 #> [43,]        5       12        0        0        0        0        6        1 #> [44,]        4       10        3       15        0       12        3       21 #> [45,]        0        0        0        0        0        0        2        0 #> [46,]        0       11        0        0        0        9        1        0 #> [47,]        1       12        0        0        0       35       13        1 #> [48,]        7        3        0        1        0        6        0        9 #> [49,]        0        3        0        0        0        1        9        1 #> [50,]        8        0        1        0        0        0        0       17 #> [51,]        1        3        7        1       27        0        0       22 #> [52,]        0        0        0        0        0        0        3        3 #> [53,]        0        0        2        0        0        0        5        5 #> [54,]       20        0        3        1        0        0        1       26 #> [55,]        0        2       17        0        0        1        1        0 #> [56,]        7        5        0        7        0        0        0       36 #>       Pardnigr Pardpull Trocterr Zoraspin #>  [1,]        0        0        0        0 #>  [2,]        0        6        1        0 #>  [3,]        0        3       13        1 #>  [4,]        0        0        4        1 #>  [5,]        0        0       28        3 #>  [6,]        0        3      105        8 #>  [7,]        0        0        0        0 #>  [8,]        1        3       40       13 #>  [9,]        0        0        3        0 #> [10,]        0        0        1        0 #> [11,]        0        0        7        2 #> [12,]        1        0        5        0 #> [13,]       35      220      226       34 #> [14,]        1        3       12        0 #> [15,]        2        0       70        3 #> [16,]       12        0       11        2 #> [17,]        1        0        8        0 #> [18,]        1        0       29        0 #> [19,]        2        9       10        6 #> [20,]        1        0        8       17 #> [21,]        3       87       56        3 #> [22,]        9      133      148       23 #> [23,]        0        0        0        0 #> [24,]       88      104       98       12 #> [25,]        0        0        0        0 #> [26,]        8       16       29        3 #> [27,]        5        0       28        1 #> [28,]        0        0        2        0 #> [29,]        0        0        8        0 #> [30,]       60        7      124       11 #> [31,]        0        0        5        1 #> [32,]       70       25      136       20 #> [33,]        0        0        5        0 #> [34,]        0        2        3        0 #> [35,]        0        0        1        0 #> [36,]        8        4       20        2 #> [37,]        0        0        0        0 #> [38,]        0        0        0        0 #> [39,]        0        0        2        0 #> [40,]       72       96      168       33 #> [41,]       11       11       27        5 #> [42,]        0        4        1        0 #> [43,]       22       34      141       30 #> [44,]       16       26       69       10 #> [45,]        0        0        8        0 #> [46,]        2       30       83       26 #> [47,]        8        0       37        6 #> [48,]        0        0        1        1 #> [49,]       13        0       40       11 #> [50,]        0        2        3        0 #> [51,]        3        0        5        2 #> [52,]        0        8       30        3 #> [53,]        0        0        3        1 #> [54,]        0        0        3        0 #> [55,]        0        0        3        0 #> [56,]        5        7       21        1  # \\donttest{ # using mvabund library(mvabund) #for manyglm abund=mvabund(abund) spider_mod = manyglm(abund~1) spid_lv = cord(spider_mod) simulate(spid_lv) #>       Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi Pardlugu Pardmont #>  [1,]        0        7        0        0        0        0        4        0 #>  [2,]       12        0       21        0       11        0        2       73 #>  [3,]        0       10        0        1        0        0       44        0 #>  [4,]       28        2        5        0        0        9        0       11 #>  [5,]        0        5        0        1        0        0        8       21 #>  [6,]       14        3        3        7        0        0        5       40 #>  [7,]        0       22        0        0        0       10        1        1 #>  [8,]        7        5        0        0        2        8        1       22 #>  [9,]        2        3        0        9        0        0        0        3 #> [10,]       18        0       27        0        7        0        0       15 #> [11,]        2        1        0        0        4        0       17        0 #> [12,]        4        0        4        0        9        0        6        6 #> [13,]        0        1        0        0        0        0       12        2 #> [14,]       25        8        0        0        0        6        0       34 #> [15,]        1        6        6        1        0        1       13        0 #> [16,]        1        0        0        0        0        6        0        1 #> [17,]        0       10        0        3        0        0        7        0 #> [18,]        1        8        0        0        0        0        0        5 #> [19,]        7        0        8        0        0        0        4       19 #> [20,]        0        4        0        0        0        0        9        1 #> [21,]        0        0        7        0       10        0        5        0 #> [22,]        0        0        0        0        0        1       38        1 #> [23,]        3       86        0       10        0       84        0       36 #> [24,]        1        0        3        0        4        0        0        2 #> [25,]        3        0        4        0        0        0        0       43 #> [26,]        0        0        0        0        0        0       12        0 #> [27,]       34        2        1        0        0        0        3       57 #> [28,]        9        6        0        0        0       13        0       73 #>       Pardnigr Pardpull Trocterr Zoraspin #>  [1,]        0        6       41        2 #>  [2,]        1        1        1        0 #>  [3,]       87       44      166       34 #>  [4,]        0       32       20        0 #>  [5,]        1        2       14        0 #>  [6,]        0        0        5        0 #>  [7,]        4       42      114       17 #>  [8,]       23        7       36        4 #>  [9,]       25        4       57        8 #> [10,]        0        0        5        0 #> [11,]        0        0       10        2 #> [12,]        0        0        0        0 #> [13,]        3        0       19        4 #> [14,]        7       76       47        2 #> [15,]       34        2       53       13 #> [16,]        0        0       14        2 #> [17,]       14       49      134       28 #> [18,]        6        0       58        4 #> [19,]        0        0        7        1 #> [20,]        1       11       67        3 #> [21,]        0        0        0        0 #> [22,]        2        0       19        0 #> [23,]      264      349      270       27 #> [24,]        0        0        1        0 #> [25,]        0        0        1        0 #> [26,]        0        0       24        0 #> [27,]        1        2       14        0 #> [28,]       13       30       56        3  spider_mod_X = manyglm(abund ~ soil.dry + bare.sand, data=spider$x) spid_lv_X = cord(spider_mod_X) Xnew = spider$x[1:10,] simulate(spid_lv_X, newdata = Xnew) #>       Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi Pardlugu Pardmont #>  [1,]        0        5        0        0        0        6        0        2 #>  [2,]        5        3        0        2        0        2        0       96 #>  [3,]       18       43        2        1        0       13        7      146 #>  [4,]        2        2        0        0        0        2       10        3 #>  [5,]        0        0        0        0        0        0       19        0 #>  [6,]        2        5        0        3        0        5        5        9 #>  [7,]        1       10        1        1        0        2        1       13 #>  [8,]        2        1        0        0        0        0        4        0 #>  [9,]        1        0        0        0        0        0        0        0 #> [10,]        2        1        7        0        0        0        0        6 #>       Pardnigr Pardpull Trocterr Zoraspin #>  [1,]        1        1       57        3 #>  [2,]        7       12       28        9 #>  [3,]       69      160       61       12 #>  [4,]        2        0       27        4 #>  [5,]        1        0       35        6 #>  [6,]        2        2       52        3 #>  [7,]        2       13      118       17 #>  [8,]       15        1       77        4 #>  [9,]        0        1        6        0 #> [10,]        0        0        4        3 simulate(spid_lv_X, nsim=2, newdata = Xnew) #>       Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi Pardlugu Pardmont #>  [1,]        8        1        1        0        0        1        2        0 #>  [2,]        2       29        0        6        0        0       12        8 #>  [3,]        2        6        0        0        0        0        6        1 #>  [4,]        1        0        0        0        0        2       15        0 #>  [5,]        0        1        0        0        0        2        3        0 #>  [6,]        3       26        0        0        0       45        0       21 #>  [7,]        2       30        0        0        0       10        6       10 #>  [8,]        0        3        1        0        0        2       26        1 #>  [9,]        3        0        0        0        0        0        1        0 #> [10,]        1        2        8        0        1        0        0        3 #> [11,]        4       18        1        0        0       30        2       45 #> [12,]        2       12        1        0        0        0        1       12 #> [13,]        0        0        0        0        0        0       24        0 #> [14,]        1        0        0        0        0        0        2        5 #> [15,]        1       25        0        3        0        5        0       26 #> [16,]        0        0        1        1        0        2        0        2 #> [17,]        1        6        0        2        0        0        5        0 #> [18,]        5        5        0        0        0       11        1       31 #> [19,]        2        2        2        1        0       11        0       39 #> [20,]        0        0        3        0        0        4        0        5 #>       Pardnigr Pardpull Trocterr Zoraspin #>  [1,]        0        3       17        1 #>  [2,]        1       69       44        1 #>  [3,]        0        2        5        3 #>  [4,]        3        0       25       10 #>  [5,]        0       14       38       13 #>  [6,]        2       24       74       16 #>  [7,]        0        0       98       14 #>  [8,]        0        0       40        5 #>  [9,]        0        0        1        0 #> [10,]        0        1       16        5 #> [11,]       44      104       63       12 #> [12,]        0        0       38        0 #> [13,]        0        0        6        0 #> [14,]        0        1       25        5 #> [15,]       32        3       25        5 #> [16,]        0        0       15       25 #> [17,]       39      446      115       26 #> [18,]        3       13       23        1 #> [19,]       13       19       33       11 #> [20,]        2        0       10        7  spider_mod_X_ssdm = stackedsdm(abund, formula_X = ~. -bare.sand, data = spider$x, ncores=2) spid_lv_X_ssdm = cord(spider_mod_X_ssdm) simulate(spid_lv_X_ssdm, newdata = Xnew) #>       Alopacce Alopcune Alopfabr Arctlute Arctperi Auloalbi Pardlugu Pardmont #>  [1,]       14        2        4        0        0        5        0       50 #>  [2,]        2       24        0        0        0       35        0       18 #>  [3,]       15        1        2        0        0       22        0        2 #>  [4,]        6        7        1        3        0       28        0       31 #>  [5,]        3        4        0        0        0        9        0       20 #>  [6,]        0       17        0        7        0        1        0        4 #>  [7,]        2       11        1        0        0        6        1        8 #>  [8,]        0        0        0        0        0        3       37        0 #>  [9,]        9        0        1        1        0        0        0       70 #> [10,]        5        5        0        0        0        0        0        7 #>       Pardnigr Pardpull Trocterr Zoraspin #>  [1,]        5       44       19        1 #>  [2,]       54       81      117       51 #>  [3,]        3       24       17        1 #>  [4,]       39       83       81        5 #>  [5,]       19       38      103        9 #>  [6,]       32        7      116       62 #>  [7,]       50      124       53       24 #>  [8,]        1        1       14        3 #>  [9,]        0        0        3        0 #> [10,]        2        1        8        0 # }"},{"path":"https://eco-stats.github.io/ecoCopula/reference/spider.html","id":null,"dir":"Reference","previous_headings":"","what":"Spider data — spider","title":"Spider data — spider","text":"Abundance hunting spiders associated environmental variables","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/spider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spider data — spider","text":"","code":"spider"},{"path":"https://eco-stats.github.io/ecoCopula/reference/spider.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spider data — spider","text":"list containing elements abund matrix 28 observations abundance 12 hunting spider species. x data frame six (transformed) environmental variables 28 sites. trait data frame three species trait variables 12 species.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/spider.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spider data — spider","text":"Data attributed van der Aart & Smeenk-Enserink (1975),  obtained spider2 directory, CANOCO FORTRAN package, trait data added David Warton, exported mvabund R package.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/spider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spider data — spider","text":"matrix abund following species abundances (column name abbreviation brackets) Alopecosa accentuata (Alopacce) Alopecosa cuneata (Alopcune) Alopecosa fabrilis (Alopfabr) Arctosa lutetiana (Arctlute) Arctosa perita(Arctperi) Aulonia albimana (Auloalbi) Pardosa lugubris (Pardlugu) Pardosa monticola (Pardmont) Pardosa nigriceps (Pardnigr) Pardosa pullata (Pardpull) Trochosa terricola (Trocterr) Zora spinimana (Zoraspin) data frame x following log(x+1)-transformed environmental variables soil.dry - Soil dry mass bare.sand - Cover bare sand fallen.leaves - Cover fallen leaves / twigs moss - Cover moss herb.layer - Cover herb layer reflection - Reflection soil surface cloudless sky data frame trait following variables length (numeric) - Length (log-transformed), averaged across typical lengths (centimetres) male females (factor) - Predominant colour, \"yellow\" \"dark\" (factor) - Whether spider typically markings : \"none\", \"spots\" \"stripes\"","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked species regression models, possibly fitted in parallel — stackedsdm","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"Stacked species regression models, possibly fitted parallel","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"","code":"stackedsdm(   y,   formula_X = ~1,   data = NULL,   family = \"negative.binomial\",   trial_size = 1,   do_parallel = FALSE,   ncores = NULL,   trace = FALSE )"},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"y matrix species responses formula_X object class formula representing relationship covariates fitted. nothing left hand side \"~\" sign. data Data frame covariates family Either single character vector, case responses assumed family, vector character strings length number columns y. Families strings actual family class objects. changed though desired future e.g., custom link functions. Currently, following families supported (hopefully properly!): \"gaussian\", \"negative.binomial\" (quadratic mean-variance relationship), \"poisson\", \"binomial\" (logit link), \"tweedie\", \"Gamma\" (log link), \"exponential\", \"beta\" (logit link), \"ordinal\" (cumulative logit model), \"ztpoisson\", \"ztnegative.binomial\", \"zipoisson\", \"zinegative.binomial\". trial_size trial size responses binomial. either single number matrix dimension y. latter, columns correspond binomial responses ignored. do_parallel separate species model fits parallel? Defaults TRUE ncores number cores use separate species model fits done parallel. do_parallel = TRUE, defaults detectCores() - 2 trace Print information. actually used currently","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"object class stackedsdm following components: call function call; fits list j-th element corresponds fitted model species j .e., j-th column y; linear_predictor matrix fitted linear predictors fitted matrix fitted values","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"stackedsdm behaves somewhat like manyglm manyany function package mvabund, sense fits separate regression species response .e., column y. main difference different families can permitted species, thus allows mixed responses types.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"Francis K.C. Hui <francis.hui@anu.edu.au>.","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/stackedsdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked species regression models, possibly fitted in parallel — stackedsdm","text":"","code":"data(spider) X <- spider$x abund <- spider$abund  # Example 1: Simple example myfamily <- \"negative.binomial\" # Example 1: Funkier example where Species are assumed to have different distributions # Fit models including all covariates are linear terms, but exclude for bare sand fit0 <- stackedsdm(abund, formula_X = ~. -bare.sand, data = X, family = myfamily, ncores = 2)   # Example 2: Funkier example where Species are assumed to have different distributions abund[,1:3] <- (abund[,1:3]>0)*1 # First three columns for presence absence myfamily <- c(rep(c(\"binomial\"), 3),               rep(c(\"negative.binomial\"), (ncol(abund)-3))) fit0 <- stackedsdm(abund, formula_X = ~ bare.sand, data = X, family = myfamily, ncores = 2)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for cgr object — summary.cgr","title":"Summary function for cgr object — summary.cgr","text":"Summary function cgr object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for cgr object — summary.cgr","text":"","code":"# S3 method for cgr summary(object, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for cgr object — summary.cgr","text":"object cgr object, e.g. output cgr. ... used","code":""},{"path":[]},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for cgr object — summary.cgr","text":"","code":"abund <- spider$abund[,1:5] spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_graph=cgr(spider_mod) summary(spid_graph) #>  #> Call: #> stackedsdm(y = abund, formula_X = ~1, data = spider$x, ncores = 2) #>  #> Pairwise associations: #>       Alo    Alo    Alo   Arc    Arc #> Alo 0.000  0.139  0.488 0.000  0.089 #> Alo 0.139  0.000 -0.221 0.373 -0.243 #> Alo 0.488 -0.221  0.000 0.000  0.317 #> Arc 0.000  0.373  0.000 0.000  0.000 #> Arc 0.089 -0.243  0.317 0.000  0.000 #>"},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cord.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for cgr object — summary.cord","title":"Summary function for cgr object — summary.cord","text":"Summary function cgr object","code":""},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for cgr object — summary.cord","text":"","code":"# S3 method for cord summary(object, ...)"},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for cgr object — summary.cord","text":"object cord object, e.g. output cgr. ... used","code":""},{"path":[]},{"path":"https://eco-stats.github.io/ecoCopula/reference/summary.cord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for cgr object — summary.cord","text":"","code":"abund <- spider$abund[,1:5] spider_mod <- stackedsdm(abund,~1, data = spider$x, ncores=2)  spid_lv=cord(spider_mod) summary(spid_lv) #>  #> Call: #> stackedsdm(y = abund, formula_X = ~1, data = spider$x, ncores = 2) #>  #> Loadings: #>      Factor1 Factor2 #> [1,]   0.715   0.061 #> [2,]  -0.138   0.988 #> [3,]   0.837  -0.274 #> [4,]  -0.069   0.450 #> [5,]   0.515  -0.364 #>"},{"path":"https://eco-stats.github.io/ecoCopula/news/index.html","id":"ecocopula-102","dir":"Changelog","previous_headings":"","what":"ecoCopula 1.0.2","title":"ecoCopula 1.0.2","text":"CRAN release: 2022-03-01 Amend residual plots construction linear predictor ordinal data stackedsdm() spider dataset compatibility mvabund 4.2.1 Minor bug fixes simulate.cord()","code":""}]
